#ifndef	__DMA_H__
#define	__DMA_H__
#include <stdint.h>

typedef struct DMA_Type DMA_reg;
typedef struct{
	  volatile uint32_t CR;
	  volatile uint32_t NDTR;
	  volatile uint32_t PAR;
	  volatile uint32_t M0AR;
	  volatile uint32_t M1AR;
	  volatile uint32_t FCR;
}Stream_t;

struct DMA_Type{
  volatile uint32_t LISR;
  volatile uint32_t HISR;
  volatile uint32_t LIFCR;
  volatile uint32_t HIFCR;
  Stream_t	S0;
  Stream_t	S1;
  Stream_t	S2;
  Stream_t	S3;
  Stream_t	S4;
  Stream_t	S5;
  Stream_t	S6;
  Stream_t	S7;
};

#define dma1   ((DMA_reg*)0x40026000)
#define dma2   ((DMA_reg*)0x40026400)


#define channel0	0
#define channel1	1
#define channel2	2
#define channel3	3
#define channel4	4
#define channel5	5
#define channel6	6
#define channel7	7

#define P2M	0
#define M2P	1
#define M2M	2

#define Priority_Low		  0
#define Priority_Medium		1
#define Priority_High		  2
#define Priority_VeryHigh	3

#define DMA_PeripheralInc_Enable	1
#define DMA_PeripheralInc_Disable	0

#define DMA_MemoryInc_Enable		1
#define DMA_MemoryInc_Disable		0

#define DMA_MemoryBurst_Single	0
#define DMA_MemoryBurst_Incr4	  1
#define DMA_MemoryBurst_Incr8	  2
#define DMA_MemoryBurst_Incr16	3

#define DMA_PeripheralBurst_Single	0
#define DMA_PeripheralBurst_Incr4	  1
#define DMA_PeripheralBurst_Incr8	  2
#define DMA_PeripheralBurst_Incr16	3


#define DMA_MemoryDataSize_byte 	  0
#define DMA_MemoryDataSize_halfword 1
#define DMA_MemoryDataSize_Word 	  2
#define DMA_MemoryDataSize_reserved 3

#define DMA_PeripheralDataSize_byte		  0
#define DMA_PeripheralDataSize_halfword	1
#define DMA_PeripheralDataSize_Word 	  2
#define DMA_PeripheralDataSize_reserved	3

#define TC_interrupt_disabled 0
#define TC_interrupt_enabled  1

#define Quater_full_FIFO		    0
#define Half_full_FIFO			    1
#define	ThreeperFour_full_FIFO	2
#define Full_FIFO				        3

#define FTH		0

#define EN		0
#define PINC	9
#define MINC	10
#define PL0		16
#define PL1		17
#define TCIE	4

#define CHTIF7	26
#define CTCIF7	27

#define PINC	9
#define MINC	10

#define DMAx_EN			1
#define FIFO_DISABLE	0

#define ARRAYSIZE 800
#define DMA_STREAM_IRQHANDLER    DMA2_Stream0_IRQHandler


void enableDMA(Stream_t *stream);
void configDMAstream(Stream_t *stream, int channel, int direction);
void connectDMAnI2C(Stream_t *stream, uint32_t mAddr, uint32_t pAddr, int numOfData);
void checkEvent(DMA_reg *dma, int flag);

#endif	//__DMA_H__
#ifndef __GPIO_H__
#define __GPIO_H__

#include <stdint.h>

#define GPIO_OUTPUT		GPIO_MODE_OUTPUT_PP
#define GPIO_INPUT		GPIO_MODE_INPUT_PP

typedef struct GPIO_t GPIO;
struct GPIO_t{
	uint32_t MODER;
	uint32_t OTYPER;
	uint32_t OSPEED;
	uint32_t PUPDR;
	uint32_t IDR;
	uint32_t ODR;
	uint32_t BSRR;
	uint32_t LCKR;
	uint32_t AFRL;
	uint32_t AFRH;

};



#define AF0			0
#define AF1			1
#define AF2			2
#define AF3			3
#define AF4			4
#define AF5			5
#define AF6			6
#define AF7			7
#define AF8			8
#define AF9			9
#define AF10		10

#define PIN_0		0
#define PIN_1		1
#define PIN_2		2
#define PIN_3		3
#define PIN_4		4
#define PIN_5		5
#define PIN_6		6
#define PIN_7		7
#define PIN_8		8
#define PIN_9		9
#define PIN_10		10
#define PIN_11		11
#define PIN_12		12
#define PIN_13		13
#define PIN_14		14
#define PIN_15		15

#define GPIO_MODE_INTPUT		0
#define GPIO_MODE_OUTPUT		1
#define GPIO_MODE_ALTFUNC		2
#define GPIO_MODE_ANALOG		3

#define GPIO_LOW_SPEED			0
#define GPIO_MEDIUM_SPEED		1
#define GPIO_HIGH_SPEED			2
#define GPIO_VERY_HIGH_SPEED	3

#define GPIO_NO_PULL_UP_DOWN	0
#define GPIO_PULL_UP			1
#define GPIO_PULL_DOWN			2
#define GPIO_RESERVED			3

#define GPIOG_BASE_ADDRESS	0x40021800
#define GPIOF_BASE_ADDRESS	0x40021400
#define GPIOC_BASE_ADDRESS	0x40020800
#define GPIOB_BASE_ADDRESS	0x40020400
#define GPIOA_BASE_ADDRESS  0x40020000

#define PORTA	((GPIO *)GPIOA_BASE_ADDRESS)
#define PORTB	((GPIO *)GPIOB_BASE_ADDRESS)
#define PORTC	((GPIO *)GPIOC_BASE_ADDRESS)
#define PORTF	((GPIO *)GPIOF_BASE_ADDRESS)
#define PORTG	((GPIO *)GPIOG_BASE_ADDRESS)

void configurePin(int mode, int pinNumber, GPIO *port, int pupdr);
void configureInputPin(int pinNumber, GPIO *port, int pupdr);
void gpioUnresetEnableClock(GPIO *port);
void configurePinAFRL(GPIO *port, int pinNumber, int af);
void configurePinAFRH(GPIO *port, int pinNumber, int af);


#endif // __GPIO_H__
#ifndef __HostRcc_H__
#define __HostRcc_H__

#include "RCC.h"

extern RCC_REG HostRcc;

#endif // __HostRcc_H__
#ifndef __I2C_H__
#define __I2C_H__

#include "stm32f4xx_hal.h"

typedef struct I2C_t I2C_REG;


struct I2C_t{

	uint32_t I2C_CR1;
	uint32_t I2C_CR2;
	uint32_t I2C_OAR1;
	uint32_t I2C_OAR2;
	uint32_t I2C_DR;
	uint32_t I2C_SR1;
	uint32_t I2C_SR2;
	uint32_t I2C_CCR;
	uint32_t I2C_TRISE;
	uint32_t I2C_FLTR;
};

#define I2C_REG_ADDRESS		0x40005400
#define I2C2_REG_ADDRESS	0x40005800
#define I2C3_REG_ADDRESS	0x40005C00

#define I2C_reg		((I2C_REG *)I2C_REG_ADDRESS)
#define I2C2_reg	((I2C_REG *)I2C2_REG_ADDRESS)
#define I2C3_reg	((I2C_REG *)I2C3_REG_ADDRESS)

/********** control register 1 **********/
#define PE			  0
#define SMBUS		  1
//RESERVED			  2
#define SMBTYPE		3
#define ENARP		  4
#define	ENPEC		  5
#define ENGC		  6
#define NOSTRETCH	7
#define START		  8
#define STOP		  9
#define ACK			  10
#define POS			  11
#define PEC			  12
#define ALERT		  13
//RESERVED			  14
#define SWRST		  15

/********** control register 2 **********/
#define ITERREN		8
#define ITEVTEN		9
#define ITBUFEN		10
#define DMAEN		11
#define LAST		12

/********** status register 1 **********/
#define SB		0
#define ADDR	1
#define BTF		2
#define ADD10	3
#define STOPF	4
//Reserved 		5
#define RxNE	6
#define TxE		7

/********** status register 2 **********/
#define	MSL		0
#define	BUSY	1
#define TRA		2
//RESERVED		3

/********** Clock Control Register************/
#define CCR   0
#define DUTY  14
#define FS   15

#define	MASTER_TRANSMIT		0
#define MASTER_RECEIVE		1

#define ADDRESS_7_BIT_MODE	0
#define ADDRESS_10_BIT_MODE	1

void configureI2cAddress(I2C_REG *i2c_reg, int ownAddress, int addr10Bit);

void configureI2C(I2C_REG *i2c_reg);

void generateStart(I2C_REG *i2c_reg);

void sendHeaderForReceive(I2C_REG *i2c_reg, int address);

void sendAddress(I2C_REG *i2c_reg, int address, int addressMode, int rw);

void i2cWriteData(int data, I2C_REG *i2c_reg);

uint8_t i2cReadData(I2C_REG *i2c_reg);

void masterSendNack(I2C_REG *i2c_reg);

void i2cStop(I2C_REG *i2c_reg);

int status1(I2C_REG *i2c_reg, int bit);

int status2(I2C_REG *i2c_reg, int bit);

void dmaRequestEnable(I2C_REG *i2c_reg);

#endif // __I2C_H__
#ifndef __RCC_H__
#define __RCC_H__


#include "GPIO.h"
#include <stdint.h>


typedef struct RCC_t RCC_REG;
struct RCC_t{
	uint32_t CR;
	uint32_t PLLCFGR;
	uint32_t CFGR;
	uint32_t CIR;
	uint32_t AHB1RSTR;
	uint32_t AHB2RSTR;
	uint32_t AHB3RSTR;
	uint32_t Reserved1;
	uint32_t APB1RSTR;
	uint32_t APB2RSTR;
	uint32_t Reserved2;
	uint32_t Reserved3;
	uint32_t AHB1ENR;
	uint32_t AHB2ENR;
	uint32_t AHB3ENR;
	uint32_t Reserved4;
	uint32_t APB1ENR;
	uint32_t APB2ENR;
};

#include "Register.h"


#define RCC_reg		((RCC_REG *)RCC_REG_ADDRESS)

void gpioUnresetEnableClock(GPIO *port);

void unresetEnableI2cClock();

void DMAUnresetEnableClock();


#endif // __RCC_H__
#ifndef __RNG_H__
#define __RNG_H__

#include <stdint.h>



typedef struct RNG_t RNG_REG;
struct RNG_t{
	uint32_t RNG_CR;
	uint32_t RNG_SR;
	uint32_t RND_DR;

};

void rngConfigure();

#define RNG_REG_ADDRESS		0x50060800

#define RNG_reg		((RNG_REG *)RNG_REG_ADDRESS)

#endif // __RNG_H__
#ifndef __Register_H__
#define __Register_H__

#include <stdint.h>

#ifndef HOST
#define RCC_REG_ADDRESS		0x40023800

#else

#include "HostRcc.h"

#define RCC_REG_ADDRESS (&HostRcc)

//#error I am trying to be genius

#endif // HOST

#endif // __Register_H__
